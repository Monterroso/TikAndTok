// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_application_1/test/widgets/video_feed_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i7;

import 'package:flutter_application_1/controllers/video_collection_manager.dart'
    as _i2;
import 'package:flutter_application_1/controllers/video_feed_controller.dart'
    as _i3;
import 'package:flutter_application_1/models/video.dart' as _i6;
import 'package:flutter_application_1/state/video_state.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVideoCollectionManager_0 extends _i1.SmartFake
    implements _i2.VideoCollectionManager {
  _FakeVideoCollectionManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VideoFeedController].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoFeedController extends _i1.Mock
    implements _i3.VideoFeedController {
  MockVideoFeedController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get feedTitle =>
      (super.noSuchMethod(
            Invocation.getter(#feedTitle),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#feedTitle),
            ),
          )
          as String);

  @override
  bool get showBackButton =>
      (super.noSuchMethod(
            Invocation.getter(#showBackButton),
            returnValue: false,
          )
          as bool);

  @override
  _i2.VideoCollectionManager get collectionManager =>
      (super.noSuchMethod(
            Invocation.getter(#collectionManager),
            returnValue: _FakeVideoCollectionManager_0(
              this,
              Invocation.getter(#collectionManager),
            ),
          )
          as _i2.VideoCollectionManager);

  @override
  bool get hasMoreVideos =>
      (super.noSuchMethod(Invocation.getter(#hasMoreVideos), returnValue: false)
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<List<_i6.Video>> getNextPage(String? lastVideoId, int? pageSize) =>
      (super.noSuchMethod(
            Invocation.method(#getNextPage, [lastVideoId, pageSize]),
            returnValue: _i5.Future<List<_i6.Video>>.value(<_i6.Video>[]),
          )
          as _i5.Future<List<_i6.Video>>);

  @override
  _i5.Future<void> onVideoInteraction(_i6.Video? video) =>
      (super.noSuchMethod(
            Invocation.method(#onVideoInteraction, [video]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  bool shouldKeepVideo(_i6.Video? video) =>
      (super.noSuchMethod(
            Invocation.method(#shouldKeepVideo, [video]),
            returnValue: false,
          )
          as bool);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [VideoCollectionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoCollectionManager extends _i1.Mock
    implements _i2.VideoCollectionManager {
  MockVideoCollectionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isLoadingLiked =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingLiked),
            returnValue: false,
          )
          as bool);

  @override
  bool get isLoadingSaved =>
      (super.noSuchMethod(
            Invocation.getter(#isLoadingSaved),
            returnValue: false,
          )
          as bool);

  @override
  List<_i6.Video> get likedVideos =>
      (super.noSuchMethod(
            Invocation.getter(#likedVideos),
            returnValue: <_i6.Video>[],
          )
          as List<_i6.Video>);

  @override
  List<_i6.Video> get savedVideos =>
      (super.noSuchMethod(
            Invocation.getter(#savedVideos),
            returnValue: <_i6.Video>[],
          )
          as List<_i6.Video>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i8.VideoState? getCachedVideoState(String? videoId) =>
      (super.noSuchMethod(Invocation.method(#getCachedVideoState, [videoId]))
          as _i8.VideoState?);

  @override
  _i5.Future<_i8.VideoState?> getVideoState(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#getVideoState, [videoId]),
            returnValue: _i5.Future<_i8.VideoState?>.value(),
          )
          as _i5.Future<_i8.VideoState?>);

  @override
  _i5.Future<void> toggleLikeVideo(String? videoId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleLikeVideo, [videoId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> toggleSaveVideo(String? videoId, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleSaveVideo, [videoId, userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchLikedVideos(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLikedVideos, [userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> fetchSavedVideos(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSavedVideos, [userId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cleanup() =>
      (super.noSuchMethod(
            Invocation.method(#cleanup, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  int getLikeCount(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#getLikeCount, [videoId]),
            returnValue: 0,
          )
          as int);

  @override
  int getSaveCount(String? videoId) =>
      (super.noSuchMethod(
            Invocation.method(#getSaveCount, [videoId]),
            returnValue: 0,
          )
          as int);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
